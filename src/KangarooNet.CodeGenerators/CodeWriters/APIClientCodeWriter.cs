// Copyright Contributors to the KangarooNet project.
// This file is licensed to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICE files in the project root for full license information.

namespace KangarooNet.CodeGenerators.CodeWriters
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Xml.Linq;
    using KangarooNet.CodeGenerators.Extensions;
    using KangarooNet.CodeGenerators.Structure;
    using KangarooNet.CodeGenerators.Writers;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    internal static class APIClientCodeWriter
    {
        public static void Generate(CodeGeneratorSettings codeGeneratorSettings, List<CodeGenerator> codeGenerators, SourceProductionContext sourceProductionContext)
        {
            var fileStringBuilder = new StringBuilder();
            fileStringBuilder.AppendLine("/*");
            fileStringBuilder.AppendLine(@"// <auto-generated>");
            fileStringBuilder.AppendLine($"namespace {codeGeneratorSettings.APIClientSettings?.APIClientNamespace}");
            fileStringBuilder.AppendLine(@"{");

            fileStringBuilder.AppendLine($"{CSFileWriter.GetWhiteSpace()}using System;");
            fileStringBuilder.AppendLine($"{CSFileWriter.GetWhiteSpace()}using System.Threading.Tasks;");
            fileStringBuilder.AppendLine($"{CSFileWriter.GetWhiteSpace()}using KangarooNet.UI.APIClient;");
            fileStringBuilder.AppendLine($"{CSFileWriter.GetWhiteSpace()}using Refit;");
            fileStringBuilder.AppendLine($"{CSFileWriter.GetWhiteSpace()}using {codeGeneratorSettings.APIClientSettings.EntitiesNamespace};");

            fileStringBuilder.AppendLine();

            foreach (var codeGenerator in codeGenerators)
            {
                foreach (var entity in codeGenerator.Entity)
                {
                    if (codeGeneratorSettings.APIClientSettings != null)
                    {
                        GenerateAPIClient(codeGeneratorSettings, entity, fileStringBuilder);
                    }
                }

                foreach (var summary in codeGenerator.Summary)
                {
                    if (codeGeneratorSettings.APIClientSettings != null)
                    {
                        GenerateAPIClient(codeGeneratorSettings, summary, fileStringBuilder);
                    }
                }
            }

            if (codeGeneratorSettings.APIClientSettings?.GenerateAuthAPIClient == true)
            {
                GenerateAuthAPIClient(codeGeneratorSettings, fileStringBuilder);
            }

            fileStringBuilder.AppendLine(@"}");
            fileStringBuilder.AppendLine("*/");

            sourceProductionContext.WriteNewCSFile("APIClientContent", fileStringBuilder.ToString());
        }

        private static void GenerateAPIClient(CodeGeneratorSettings codeGeneratorSettings, Entity entity, StringBuilder fileStringBuilder)
        {
            if (entity.GenerateEntityHandlerRequest?.GenerateController?.GenerateAPIClient == true)
            {
                WriteEntityHandlerAPIClient(codeGeneratorSettings, entity, fileStringBuilder);
            }

            if (entity.GenerateEntityQueryRequest?.GenerateController?.GenerateAPIClient == true)
            {
                WriteQueriesAPIClient(codeGeneratorSettings, entity.Name, false, entity.GenerateEntityQueryRequest?.GenerateController?.IsAuthenticationRequired == true, fileStringBuilder);
            }

            if (entity.GenerateEntitiesQueryRequest?.GenerateController?.GenerateAPIClient == true)
            {
                WriteQueriesAPIClient(codeGeneratorSettings, entity.PluralName, true, entity.GenerateEntitiesQueryRequest?.GenerateController?.IsAuthenticationRequired == true, fileStringBuilder);
            }
        }

        private static void GenerateAPIClient(CodeGeneratorSettings codeGeneratorSettings, Summary summary, StringBuilder fileStringBuilder)
        {
            if (summary.GenerateSummaryQueryRequest?.GenerateController?.GenerateAPIClient == true)
            {
                WriteQueriesAPIClient(codeGeneratorSettings, summary.Name, false, summary.GenerateSummaryQueryRequest?.GenerateController?.IsAuthenticationRequired == true, fileStringBuilder);
            }

            if (summary.GenerateSummariesQueryRequest?.GenerateController?.GenerateAPIClient == true)
            {
                WriteQueriesAPIClient(codeGeneratorSettings, summary.PluralName, true, summary.GenerateSummariesQueryRequest?.GenerateController?.IsAuthenticationRequired == true, fileStringBuilder);
            }
        }

        private static void GenerateAuthAPIClient(CodeGeneratorSettings codeGeneratorSettings, StringBuilder fileStringBuilder)
        {
            var interfaceName = $"IAuthClient";
            var fileWriter = new CSFileWriter(
                CSFileWriterType.Interface,
                fileNamespace: string.Empty,
                name: interfaceName,
                isPartial: true,
                inheritance: "IAPIClient");

            fileWriter.WriteMethod(
                "InsertApplicationUserAsync",
                returnType: "Task<ApplicationUserInsertResponse>",
                parameters: "[Body] ApplicationUserInsertRequest request",
                attributes: new List<string>() { "Post(\"/api/Auth/InsertApplicationUser\")" });

            fileWriter.WriteMethod(
                "LoginAsync",
                returnType: "Task<LoginResponse>",
                parameters: "[Body] LoginRequest request",
                attributes: new List<string>() { "Post(\"/api/Auth/Login\")" });

            fileWriter.WriteMethod(
                "RefreshTokenAsync",
                returnType: "Task<RefreshTokenResponse>",
                parameters: "[Body] RefreshTokenRequest request",
                attributes: codeGeneratorSettings.APIClientSettings.IncludeBearerHeader ? new List<string>() { "Post(\"/api/Auth/RefreshToken\")", "Headers(\"Authorization: Bearer\")" } : new List<string>() { "Post(\"/api/Auth/RefreshToken\")" });

            fileWriter.WriteMethod(
                "LogoutAsync",
                returnType: "Task<LogoutResponse>",
                parameters: "[Body] LogoutRequest request",
                attributes: codeGeneratorSettings.APIClientSettings.IncludeBearerHeader ? new List<string>() { "Post(\"/api/Auth/Logout\")", "Headers(\"Authorization: Bearer\")" } : new List<string>() { "Post(\"/api/Auth/Logout\")" });

            fileWriter.WriteMethod(
                "ChangePasswordAsync",
                returnType: "Task<ChangePasswordResponse>",
                parameters: "[Body] ChangePasswordRequest request",
                attributes: codeGeneratorSettings.APIClientSettings.IncludeBearerHeader ? new List<string>() { "Post(\"/api/Auth/ChangePassword\")", "Headers(\"Authorization: Bearer\")" } : new List<string>() { "Post(\"/api/Auth/ChangePassword\")" });

            fileStringBuilder.AppendLine(fileWriter.GetFileContent());
        }

        private static void WriteEntityHandlerAPIClient(
            CodeGeneratorSettings codeGeneratorSettings,
            Entity entity,
            StringBuilder fileStringBuilder)
        {
            var entityName = entity.Name;
            var interfaceName = $"I{entityName}Client";
            var apiClientFileWriter = new CSFileWriter(
                CSFileWriterType.Interface,
                fileNamespace: string.Empty,
                name: interfaceName,
                isPartial: true,
                inheritance: "IAPIClient");

            var attributes = new List<string>();
            attributes.Add($"Post(\"/api/{entityName}Handler/Post\")");

            if (entity.GenerateEntityHandlerRequest.GenerateController.IsAuthenticationRequired
                && codeGeneratorSettings.APIClientSettings.IncludeBearerHeader)
            {
                attributes.Add("Headers(\"Authorization: Bearer\")");
            }

            apiClientFileWriter.WriteMethod(
                "PostAsync",
                returnType: $"Task<{entityName}HandlerResponse>",
                parameters: $"[Body] {entityName}HandlerRequest request",
                attributes: attributes);

            fileStringBuilder.AppendLine(apiClientFileWriter.GetFileContent());
        }

        private static void WriteQueriesAPIClient(
            CodeGeneratorSettings codeGeneratorSettings,
            string entityName,
            bool isRetrievingManyEntities,
            bool isAuthenticationRequired,
            StringBuilder fileStringBuilder)
        {
            var interfaceName = $"I{entityName}QueryClient";
            var apiClientFileWriter = new CSFileWriter(
                CSFileWriterType.Interface,
                fileNamespace: string.Empty,
                name: interfaceName,
                isPartial: true,
                inheritance: "IAPIClient");

            var attributes = new List<string>();

            if (isRetrievingManyEntities)
            {
                attributes.Add($"Get(\"/api/{entityName}Query/GetEntities\")");
            }
            else
            {
                attributes.Add($"Get(\"/api/{entityName}Query/GetEntity\")");
            }

            if (isAuthenticationRequired
                && codeGeneratorSettings.APIClientSettings.IncludeBearerHeader)
            {
                attributes.Add("Headers(\"Authorization: Bearer\")");
            }

            var methodName = isRetrievingManyEntities ? "GetEntitiesAsync" : "GetEntityAsync";

            apiClientFileWriter.WriteMethod(
                methodName,
                returnType: $"Task<{entityName}QueryResponse>",
                parameters: $"[Query] {entityName}QueryRequest request",
                attributes: attributes);

            fileStringBuilder.AppendLine(apiClientFileWriter.GetFileContent());
        }
    }
}
